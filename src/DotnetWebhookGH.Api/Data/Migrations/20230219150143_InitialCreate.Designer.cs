// <auto-generated />
using System;
using DotnetWebhookGH.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DotnetWebhookGH.Api.Data.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20230219150143_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DotnetWebhookGH.Api.Data.Model.Issues.Issue", b =>
                {
                    b.Property<string>("Delivery")
                        .HasColumnType("text")
                        .HasColumnName("delivery");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("locked");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<long>("RepositoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("repository_id");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sender_id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Delivery");

                    b.HasIndex("Number");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("issue", "public");
                });

            modelBuilder.Entity("DotnetWebhookGH.Api.Data.Model.Labels.Label", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("label", "public");
                });

            modelBuilder.Entity("DotnetWebhookGH.Api.Data.Model.Reactions.Reaction", b =>
                {
                    b.Property<string>("Delivery")
                        .HasColumnType("text")
                        .HasColumnName("delivery");

                    b.Property<int>("Confused")
                        .HasColumnType("integer")
                        .HasColumnName("confused");

                    b.Property<int>("Eyes")
                        .HasColumnType("integer")
                        .HasColumnName("eyes");

                    b.Property<int>("Heart")
                        .HasColumnType("integer")
                        .HasColumnName("heart");

                    b.Property<int>("Hooray")
                        .HasColumnType("integer")
                        .HasColumnName("hooray");

                    b.Property<int>("Laugh")
                        .HasColumnType("integer")
                        .HasColumnName("laugh");

                    b.Property<int>("OneMinus")
                        .HasColumnType("integer")
                        .HasColumnName("one_minus");

                    b.Property<int>("OnePlus")
                        .HasColumnType("integer")
                        .HasColumnName("one_plus");

                    b.Property<int>("Rocket")
                        .HasColumnType("integer")
                        .HasColumnName("rocket");

                    b.Property<int>("TotalCount")
                        .HasColumnType("integer")
                        .HasColumnName("total_count");

                    b.HasKey("Delivery");

                    b.ToTable("reaction", "public");
                });

            modelBuilder.Entity("DotnetWebhookGH.Api.Data.Model.Repositories.Repository", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("DefaultBranch")
                        .HasColumnType("text")
                        .HasColumnName("default_branch");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsFork")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fork");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("Topics")
                        .HasColumnType("text")
                        .HasColumnName("topics");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.ToTable("repository", "public");
                });

            modelBuilder.Entity("DotnetWebhookGH.Api.Data.Model.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.HasKey("Id");

                    b.HasIndex("Login");

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("IssueLabel", b =>
                {
                    b.Property<string>("issue_delivery")
                        .HasColumnType("text");

                    b.Property<long>("label_id")
                        .HasColumnType("bigint");

                    b.HasKey("issue_delivery", "label_id");

                    b.HasIndex("label_id");

                    b.ToTable("issue_label", "public");
                });

            modelBuilder.Entity("IssueUser", b =>
                {
                    b.Property<string>("issue_delivery")
                        .HasColumnType("text");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("issue_delivery", "user_id");

                    b.HasIndex("user_id");

                    b.ToTable("issue_assignee", "public");
                });

            modelBuilder.Entity("DotnetWebhookGH.Api.Data.Model.Issues.Issue", b =>
                {
                    b.HasOne("DotnetWebhookGH.Api.Data.Model.Repositories.Repository", "Repository")
                        .WithMany("Issues")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetWebhookGH.Api.Data.Model.Users.User", "Sender")
                        .WithMany("SentIssues")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DotnetWebhookGH.Api.Data.Model.Reactions.Reaction", b =>
                {
                    b.HasOne("DotnetWebhookGH.Api.Data.Model.Issues.Issue", "Issue")
                        .WithOne("Reactions")
                        .HasForeignKey("DotnetWebhookGH.Api.Data.Model.Reactions.Reaction", "Delivery")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("DotnetWebhookGH.Api.Data.Model.Repositories.Repository", b =>
                {
                    b.HasOne("DotnetWebhookGH.Api.Data.Model.Users.User", "Owner")
                        .WithMany("Repositories")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IssueLabel", b =>
                {
                    b.HasOne("DotnetWebhookGH.Api.Data.Model.Issues.Issue", null)
                        .WithMany()
                        .HasForeignKey("issue_delivery")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetWebhookGH.Api.Data.Model.Labels.Label", null)
                        .WithMany()
                        .HasForeignKey("label_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueUser", b =>
                {
                    b.HasOne("DotnetWebhookGH.Api.Data.Model.Issues.Issue", null)
                        .WithMany()
                        .HasForeignKey("issue_delivery")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotnetWebhookGH.Api.Data.Model.Users.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotnetWebhookGH.Api.Data.Model.Issues.Issue", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("DotnetWebhookGH.Api.Data.Model.Repositories.Repository", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("DotnetWebhookGH.Api.Data.Model.Users.User", b =>
                {
                    b.Navigation("Repositories");

                    b.Navigation("SentIssues");
                });
#pragma warning restore 612, 618
        }
    }
}
